name: CloudClearingAPI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cloudclearing_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8 mypy
    
    - name: Set up test environment
      run: |
        cp config/config.example.yaml config/config.yaml
        # Note: Earth Engine authentication not available in CI
        # Tests should mock EE calls or skip them
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true  # mypy can be strict, make non-blocking initially
    
    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cloudclearing_test
        GEE_PROJECT: ${{ secrets.GEE_PROJECT }}
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities with safety
      run: |
        safety check --json || true
    
    - name: Check for security issues with bandit
      run: |
        bandit -r src/ -f json || true

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t cloudclearing-api:test .
    
    - name: Test Docker image
      run: |
        # Run basic container test
        docker run --rm cloudclearing-api:test python -c "import src.core.config; print('âœ… Import test passed')"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, build-and-test-docker]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      env:
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: SSH into server and update code
        echo "Staging deployment would happen here"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, build-and-test-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/cloudclearing-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/cloudclearing-api:${{ github.sha }}
    
    - name: Deploy to production
      env:
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
        PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add your production deployment commands here
        echo "Production deployment would happen here"

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build-and-test-docker]
    if: always()
    
    steps:
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#cloudclearing-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#cloudclearing-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}